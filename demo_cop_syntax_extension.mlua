package.path = "./?.lua"
require "oo.oo"
require "cop.cop"
oo.openpackage()

--- definitions ----
Person = class(Object)

function Person:__init(name, address, employer)
   self.name = name
   self.address = address
   self.employer = employer
end

function Person:toString()
   return "Name: " .. self.name
end

function Person:Address_toString() -- "_" separates layer name from method name
   return proceed() .. "; Contact: " .. self.address;
end

function Person:Employment_toString()
   return proceed() .. "; Employer: " .. self.employer:toString();
end

--

Employer = class(Object)

function Employer:__init(name, address)
   self.name = name
   self.address = address
end

function Employer:toString()
   return "Name: " .. self.name
end

function Employer:Address_toString()
   return proceed() .. "; Visitors: " .. self.address;
end


--- definition of Metalua Syntax extensio ---
-- Note: Metalua can't be imported properly with "require" (maybe a bug in Metalua),
-- therefore the extension code is put here

-{ block:
	local function builder (block)
		local layers, expr = unpack(block)
		return +{
			with(-{layers}, function() -{expr} end)
		}
	end

	mlp.lexer:add{"with"}
	mlp.expr:add {
		"with", mlp.expr, "do", mlp.block, "end", builder = builder
	}
}

--- usage ---
employer = Employer:new("Springfield Nuclear Power Plant", "Springfield")
person = Person:new("Homer Simpson", "742 Evergreen Terrace", employer)

with Address do
	print(person:toString())
end

with Address do
	with Employment do
		print(person:toString())
	end
end

with {Address, Employment} do
	print(person:toString())
end

function computeLayers() return {Employment, Address} end

with computeLayers() do
	print(person:toString())
end
